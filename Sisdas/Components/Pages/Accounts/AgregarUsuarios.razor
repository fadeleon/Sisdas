@page "/admin/crearusuario"
@layout DashBoardLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Sisdas.Data
@using Sisdas.Models.Entities.Sisdas
@using Sisdas.Repositorios.Interfaces
@using Sisdas.Models.Otros
@using Sisdas.Repositorios.Servicios
@* @attribute [Authorize (Roles = "super-user, administrador")] *@
@attribute [StreamRendering]

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _roleManager
@inject IUserData _UserService
@inject ICommon CommonService   

<div class="container-fluid p-3">
    <EditForm Model="UserInfo" method="post" OnValidSubmit="RegisterNewUser" FormName="register">
        <h3>Registrar Usuario</h3>
        <div class="row">
            <div class="col-lg-6 col-sm-12 col-md-6">
                <h4 class="mb-5">Datos Generales</h4>
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />
                <div class="mb-3">
                    <label class="fw-bold">¿Es usuario del minsa?</label>
                    <div>
                        <InputRadioGroup @bind-Value="IsFromDominio">
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" Value="true" id="dominioSi"/>
                                <label class="form-check-label" for="dominioSi">Sí</label>
                            </div>         
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" Value="false" id="dominioNo"/>
                                <label class="form-check-label" for="dominioNo">No</label>
                            </div>
                        </InputRadioGroup>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="fw-bold mb-1" for="correo">Correo</label>
                    <div class="d-flex flex-wrap gap-2 align-items-start">
                        <div class="flex-grow-1">
                            <InputText id="correo" @bind-Value="UserInfo.Correo" class="form-control"
                                       placeholder="nombre@ejemplo.com" aria-required="true" disabled="@(UserInfo.IsFromDominio == null)"/>
                            <ValidationMessage For="() => UserInfo.Correo" class="text-danger" />
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ValidateEmail" disabled="@( UserInfo.IsFromDominio != true )" >
                                <i class="fa-solid fa-magnifying-glass me-1"></i>Validar
                            </button>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Nombres <span class="text-muted ms-1">(Primer y Segundo Nombre)</span> </label>
                    <InputText @bind-Value="UserInfo.Nombres" class="form-control text-uppercase" aria-required="true" disabled="@( UserInfo.IsFromDominio != false )" oninput="this.value = this.value.toUpperCase()" />
                    <ValidationMessage For="() => UserInfo.Nombres" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Apellidos <span class="text-muted ms-1">(Primer y Segundo Apellido)</span> </label>
                    <InputText @bind-Value="UserInfo.Apellidos" class="form-control text-uppercase" aria-required="true" disabled="@( UserInfo.IsFromDominio != false )" oninput="this.value = this.value.toUpperCase()" />
                    <ValidationMessage For="() => UserInfo.Apellidos" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Número de Documento de Identidad <span class="text-muted ms-1">(Cédula o Pasaporte)</span> </label>
                    <InputText @bind-Value="UserInfo.NumeroDocumentoIdent" class="form-control text-uppercase w-auto" aria-required="true" disabled="@(!IsFromDominio.HasValue)" oninput="this.value = this.value.toUpperCase()" />
                    <ValidationMessage For="() => UserInfo.NumeroDocumentoIdent" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Género</label>
                    <div>
                        <InputRadioGroup @bind-Value="UserInfo.Genero">
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" Value="@("M")" id="masculino" disabled="@(!IsFromDominio.HasValue)" />
                                <label class="form-check-label" for="masculino">Masculino</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" Value="@("F")" id="femenino" disabled="@(!IsFromDominio.HasValue)" />
                                <label class="form-check-label" for="femenino">Femenino</label>
                            </div>
                        </InputRadioGroup>
                        <ValidationMessage For="() => UserInfo.Genero" class="text-danger"/>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Télefono Movil </label>
                    <InputText @bind-Value="UserInfo.TelefonoMovil" class="form-control text-uppercase" aria-required="true" disabled="@(!IsFromDominio.HasValue)" oninput="this.value = this.value.toUpperCase()" />
                    <ValidationMessage For="() => UserInfo.TelefonoMovil" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label class="fw-bold">Télefono Laboral </label>
                    <InputText @bind-Value="UserInfo.TelefonoLaboral" class="form-control text-uppercase" aria-required="true" disabled="@(!IsFromDominio.HasValue)" oninput="this.value = this.value.toUpperCase()" />
                    <ValidationMessage For="() => UserInfo.TelefonoLaboral" class="text-danger"/>
                </div>
                @if (RegionalSelected)
                {
                    <div class="mb-3">
                        <label class="fw-bold">Region de Salud</label>
                        <InputSelect @bind-Value="UserInfo.RegionSalud" class="form-select" disabled="@(!IsFromDominio.HasValue)">
                            <option value="0">-- SELECIONE --</option>
                            @foreach (var item in regionesSalud)
                            {
                                <option value="@item.IdRegion">@item?.NombreRegion?.ToUpper()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => UserInfo.RegionSalud" class="text-danger"/>
                    </div>
                }
                @if (LocalSelected)
                {
                    <div class="mb-3">
                        <label class="fw-bold">Instalación de Salud</label>
                        <AutoComplete @bind-Value="filtroInstalaciones"
                                      TItem="ListModel"
                                      disabled="@(!IsFromDominio.HasValue)"
                                      DataProvider="AutoCompleteDataProvider"
                                      OnChanged="OnAutoCompleteChanged"
                                      PropertyName="Name"
                                      class="form-control"
                                      Placeholder="Busque por instalación"/>
                        <ValidationMessage For="() => UserInfo.InstalacionSalud" class="text-danger"/>
                    </div>
                }

                <button type="submit" class="w-100 btn btn-sm btn-primary" disabled="@( UserInfo.IsFromDominio == null )" >Crear Usuario</button>
            </div>
            <div class="col-lg-6 col-sm-12 col-md-6">
                <h4>Roles</h4>
                <AuthorizeView Roles="super-user" Context="auth">
                    <Authorized>
                        <div class="form-check mb-1">
                            <input id="chkSuperUser"
                                   type="checkbox"
                                   class="form-check-input"
                                   @bind="UserInfo.SuperUser" />
                            <label class="form-check-label" for="chkSuperUser">Super Usuario</label>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="form-check mb-1">
                            <input id="chkSuperUserDisabled"
                                   type="checkbox"
                                   class="form-check-input"
                                   disabled="true" />
                            <label class="form-check-label" for="chkSuperUserDisabled" title="No tiene permiso">Super Usuario</label>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>

                <div class="form-check mb-1">
                    <input id="chkAdministrador" type="checkbox" class="form-check-input" @bind="UserInfo.Administrador" />
                    <label class="form-check-label" for="chkAdministrador">Administrador</label>
                </div>
                <div class="form-check mb-1">
                    <input id="chkRegional" type="checkbox" class="form-check-input" @bind="RegionalSelected" />
                    <label class="form-check-label" for="chkRegional">Regional</label>
                </div>
                <div class="form-check mb-1">
                    <input id="chkLocal" type="checkbox" class="form-check-input" @bind="LocalSelected" />
                    <label class="form-check-label" for="chkLocal">Local</label>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    #region VARIABLES
    [Inject] protected ToastService _ToastService { get; set; } = default!;
    private UserModel UserInfo { get; set; } = new();
    private List<string> ErrorsFormMessages { get; set; } = new();
    private bool UserFound { get; set; } = false;
    private List<CatRegionSalud> regionesSalud = new();
    private string filtroInstalaciones = "";
    #endregion

    #region MODELOS
    private sealed class UserModel : IValidatableObject
    {
        [Required]
        [EmailAddress(ErrorMessage = "Debe ingresar un correo válido.")]
        [Display(Name = "Correo")]
        public string Correo { get; set; } = "";

        [Required]
        [RegularExpression(@"^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$", ErrorMessage = "Los nombres solo puede contener letras.")]
        [Display(Name = "Nombres")]
        public string Nombres { get; set; } = "";

        [Required]
        [RegularExpression(@"^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$", ErrorMessage = "Los apellidos solo puede contener letras.")]
        [Display(Name = "Apellidos")]
        public string Apellidos { get; set; } = "";

        [Required]
        [Display(Name = "Numero de Documento de Identidad")]
        public string NumeroDocumentoIdent { get; set; } = "";

        public string Genero { get; set; } = "";

        [Required]
        [RegularExpression(@"^\d+$", ErrorMessage = "El teléfono movil solo puede contener números.")]
        [Display(Name = "Télefono Movil")]
        public string TelefonoMovil { get; set; } = "";

        [Required]
        [RegularExpression(@"^\d+$", ErrorMessage = "El teléfono laboral solo puede contener números.")]
        [Display(Name = "Télefono Laboral")]
        public string TelefonoLaboral { get; set; } = "";

        public int? InstalacionSalud { get; set; }
        public int RegionSalud { get; set; }
        public bool? IsFromDominio { get; set; } = null;

        // ROLES
        public bool SuperUser { get; set; } = false;
        public bool Administrador { get; set; } = false;
        public bool Regional { get; set; } = false;
        public bool Local { get; set; } = false;
        
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (string.IsNullOrWhiteSpace(Genero))
            {
                yield return new ValidationResult(
                    "Debe seleccionar un género.",
                    new[] { nameof(Genero) });
            }
            if (Local && (InstalacionSalud == null || InstalacionSalud == 0))
            {
                yield return new ValidationResult(
                    "Debe seleccionar una Instalación de Salud.",
                    new[] { nameof(InstalacionSalud) });
            }

            if (Regional && RegionSalud <= 0)
            {
                yield return new ValidationResult(
                    "Debe seleccionar una Región de Salud.",
                    new[] { nameof(RegionSalud) });
            }
        }
    }
    #endregion

    #region EVENTOS

    protected override async Task OnInitializedAsync()
    {
        regionesSalud = await CommonService.GetRegiones();
    }

    private async Task RegisterNewUser()
    {
        try
        {
            if (!(UserInfo.SuperUser || UserInfo.Administrador || UserInfo.Regional || UserInfo.Local))
            {
                _ToastService.Notify(new(ToastType.Warning, "Validación", $"{DateTime.Now}",
                    "Debe seleccionar al menos un rol antes de guardar."));
                return;
            }
            string passwordToUse;

            if (UserInfo.IsFromDominio == true)
            {
                passwordToUse = await CommonService.GetFakePassword();
            }
            else
            {
                passwordToUse = GenerarContrasenaTemporal();
            }
            

            ApplicationUser newUser = new ApplicationUser()
                {
                    UserName = UserInfo.Correo,
                    Email = UserInfo.Correo,
                    Nombres = UserInfo.Nombres,
                    Apellidos = UserInfo.Apellidos,
                    NumeroDocumentoIdentidad = UserInfo.NumeroDocumentoIdent,
                    Genero = UserInfo.Genero,
                    PhoneNumber = UserInfo.TelefonoMovil,
                    TelefonoLaboral = UserInfo.TelefonoLaboral,
                    idRegionSalud = UserInfo.RegionSalud,
                    idInstalacionSalud = UserInfo.InstalacionSalud,
                    CreatedAt = DateTime.Now,
                    EmailConfirmed = true,
                    IsActivo = true,
                    IsFromActiveDirectory = (UserInfo.IsFromDominio == true)
                };

            ResultModel Resultado = await _UserService.CreateUser(newUser, passwordToUse);
            if (Resultado.Resultado)
            {
                IdentityResult? roleResult = null;

                if (UserInfo.SuperUser)
                {
                    roleResult = await _UserManager.AddToRoleAsync(newUser, "super-user");
                }
                else if (UserInfo.Administrador)
                {
                    roleResult = await _UserManager.AddToRoleAsync(newUser, "administrador");

                    if (roleResult.Succeeded)
                    {
                        if (UserInfo.Regional)
                            await _UserManager.AddToRoleAsync(newUser, "regional");
                        if (UserInfo.Local)
                            await _UserManager.AddToRoleAsync(newUser, "local");
                    }
                }
                else
                {
                    if (UserInfo.Regional)
                        roleResult = await _UserManager.AddToRoleAsync(newUser, "regional");
                    if (UserInfo.Local)
                        roleResult = await _UserManager.AddToRoleAsync(newUser, "local");
                }

                _ToastService.Notify(new(ToastType.Success, "Validación", $"{DateTime.Now}", "Usuario creado exitosamente."));
                NavigationManager.NavigateTo("/admin/listausuarios");
            }
            else
            {
                Console.WriteLine("Errores:");
                foreach(var e in Resultado.Errores)
                {
                    Console.WriteLine(e);
                }

                string errors = "";
                foreach (var item in Resultado.Errores)
                {
                    errors += item + "\n";
                }
                _ToastService.Notify(new(ToastType.Danger, $"Error", $"{DateTime.Now}", $"Error: {errors}."));
            }
        }
        catch (Exception ex)
        {
            _ToastService.Notify(new(ToastType.Danger, $"Error", $"{DateTime.Now}", $"Error: {ex.Message}."));
        }
    }
    
    private string GenerarContrasenaTemporal()
    {
        var rnd = new Random();

        const string mayusculas = "ABCDEFGHJKLMNPQRSTUVWXYZ";
        const string minusculas = "abcdefghijkmnpqrstuvwxyz";
        const string digitos = "23456789";

        string todos = mayusculas + minusculas + digitos;

        char c1 = mayusculas[rnd.Next(mayusculas.Length)];
        char c2 = minusculas[rnd.Next(minusculas.Length)];
        char c3 = digitos[rnd.Next(digitos.Length)];

        var passwordChars = new List<char> { c1, c2, c3 };
        for (int i = 0; i < 7; i++)
        {
            passwordChars.Add(todos[rnd.Next(todos.Length)]);
        }

        return new string(passwordChars.OrderBy(x => rnd.Next()).ToArray());
    }

    private async Task ValidateEmail()
    {
        ErrorsFormMessages.Clear();

        var SearchUser = await _UserManager.FindByEmailAsync(UserInfo.Correo);
        if (SearchUser != null)
        {
            _ToastService.Notify(new(ToastType.Warning, "Validación", $"{DateTime.Now}", "El usuario ya está registrado en el sistema."));
            return;
        }

        ResultGenericModel<ActiveDirectoryUserModel> ActiveDirectoryUserModelData =
            await _UserService.FindUserByEmail(UserInfo.Correo);

        if (ActiveDirectoryUserModelData.Data != null)
        {
            UserFound = true;
            UserInfo.Apellidos = ActiveDirectoryUserModelData.Data.lastName;
            UserInfo.Nombres = ActiveDirectoryUserModelData.Data.firstName;
            _ToastService.Notify(new(ToastType.Success, "Validación", $"{DateTime.Now}", "Usuario encontrado en AD"));
        }
        else
        {
            UserFound = false;
            UserInfo.Apellidos = "";
            UserInfo.Nombres = "";
            _ToastService.Notify(new(ToastType.Danger, "Validación", $"{DateTime.Now}", "No se encuentro el usuario."));
        }
    }

    private bool? IsFromDominio
    {
        get => UserInfo.IsFromDominio;
        set
        {
            if (UserInfo.IsFromDominio == value) return;

            UserInfo.IsFromDominio = value;

            UserInfo.Correo = "";
            UserInfo.Nombres = "";
            UserInfo.Apellidos = "";

            UserFound = false;

            StateHasChanged();
        }
    }
    
    private async Task<AutoCompleteDataProviderResult<ListModel>> AutoCompleteDataProvider(
        AutoCompleteDataProviderRequest<ListModel> request)
    {

        var filtro = (request.Filter?.Value?.ToString() ?? "").ToUpper();

        var lista = await CommonService.GetInstalaciones(filtro);


        var filtradas = lista.Select(x => new ListModel
        {
            Id = x.Id,
            Name = x.Name.Trim()
        });

        return new AutoCompleteDataProviderResult<ListModel>
        {
            Data = filtradas,
            TotalCount = filtradas.Count()
        };
    }
    
    private void OnAutoCompleteChanged(ListModel? instalacion)
    {
        UserInfo.InstalacionSalud = instalacion?.Id;
    }
    
    private bool RegionalSelected
    {
        get => UserInfo.Regional;
        set
        {
            if (UserInfo.Regional == value) return;

            UserInfo.Regional = value;

            if (value)
            {
                UserInfo.Local = false;
            }
            else
            {
                UserInfo.RegionSalud = 0;
            }

            StateHasChanged();
        }
    }

    private bool LocalSelected
    {
        get => UserInfo.Local;
        set
        {
            if (UserInfo.Local == value) return;

            UserInfo.Local = value;

            if (value)
            {
                UserInfo.Regional = false;
            }
            else
            {
                UserInfo.InstalacionSalud = null;
                filtroInstalaciones = "";
            }

            StateHasChanged();
        }
    }

    #endregion
}